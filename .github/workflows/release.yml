name: Release Obsidian plugin

on:
  push:
    tags:
      - "*"

env:
  PLUGIN_NAME: lskypro-upload  # 设置插件名称

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Get Version
        id: version
        run: |
          echo "version=$(node -p "require('./manifest.json').version")" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check Version Match
        run: |
          if [ "${{ steps.version.outputs.version }}" != "${{ steps.version.outputs.tag }}" ]; then
            echo "Version in manifest.json (${{ steps.version.outputs.version }}) does not match tag (${{ steps.version.outputs.tag }})"
            exit 1
          fi

      - name: Install Dependencies
        run: npm install

      - name: Build plugin
        run: npm run build

      - name: Package plugin
        run: |
          mkdir ${{ env.PLUGIN_NAME }}
          cp main.js manifest.json ${{ env.PLUGIN_NAME }}
          if [ -f "styles.css" ]; then
            cp styles.css ${{ env.PLUGIN_NAME }}
          fi
          zip -r ${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.version }}.zip ${{ env.PLUGIN_NAME }}

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 创建发布
          gh release create "${{ steps.version.outputs.tag }}" \
            --title="${{ steps.version.outputs.tag }}" \
            --draft \
            ${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.version }}.zip \
            main.js \
            manifest.json \
            $([ -f "styles.css" ] && echo "styles.css")

      - name: Upload source code
        run: |
          # 创建源代码压缩包
          zip -r source-code.zip . -x "node_modules/*" "${{ env.PLUGIN_NAME }}/*" "${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.version }}.zip"
          tar czf source-code.tar.gz --exclude="node_modules" --exclude="${{ env.PLUGIN_NAME }}" --exclude="${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.version }}.zip" .
          
          # 上传源代码到发布
          gh release upload "${{ steps.version.outputs.tag }}" source-code.zip source-code.tar.gz
